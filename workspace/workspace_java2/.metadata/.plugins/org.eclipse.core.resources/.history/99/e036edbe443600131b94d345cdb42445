/**
 * 
 */
package algorithme;

import gestionFichier.FileWR;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * @author Mickael
 *
 */
public class ChainageAvant 
{
	private ArrayList<String> BR = new ArrayList<String>();
	private ArrayList<String> Demandable;
	private ArrayList<String> BF=  new ArrayList<String>();
	private ArrayList<String> VF;
	private ArrayList<String> VA;
	private ArrayList<String> VC;
	private boolean inf = true;
	private boolean dec;
	private int nbinf = 0;



	public ChainageAvant()
	{
		// TODO Auto-generated constructor stub
		chargerBR();
		chargerBF();
		
	}

	public void verifiationChainageAvant()
	{
		//TODO M C'est quoi??!!

		String m = new String("");
		String r = new String("");
		System.out.println("START");
		while (inf)	{
			inf = false;
			BR.add("R1,demarre,passage vitesse impossible,boite casse");
			BR.add("R2,passage vitesse impossible,roule pas");
			BR.add("R3,demarre,roule,nuit,feux grille");
			BR.add("R4,acceleration,passage vitesse,roule");
			BR.add("R5,nuit,non vision route");
			BR.add("R6,demarre,roule,bruit suspect,usure freins");
			for (int i = 0; i < BR.size(); i++){

				//on charge la regle en la splitant dans un tableau
				String[] defRegle = BR.get(i).split(",");

				//on converti la regle en arraylist
				ArrayList<String> definitionRegle = new ArrayList(Arrays.asList(defRegle));

				//on sort le resulat de la règle, ex: A,B => C , ici on prend C
				String regle = definitionRegle.get(definitionRegle.size()-1).toString();

				//on fait l'array des antecedents
				ArrayList<String> antecedents = new ArrayList<String>();
				antecedents = definitionRegle;
				antecedents.remove(0);
				antecedents.remove(definitionRegle.size()-1);
				//affichage de la regles et des antecedents
				System.out.print("regle:" + regle + "antecedent ");
				for(String s : antecedents){
					System.out.print(s + " ,");
				}
				System.out.println("");
				//on parcours la base de fait pour voir si les antecedents sont presents
				System.out.print("BF :");
				for(String s : BF){
					System.out.print(s + " ,");
				}
				System.out.println("");
				
				boolean valid = false;
				for (int j = 0; j < BF.size(); j++) {
					if (antecedents.contains(BF.get(j))){
						valid = true;
					}else{
						valid = false;
					}
				}
				if(valid){
					System.out.println("Regle :" + regle + "validée");
				}
			}
		}
		System.out.println("END");
	}

	public void chargerBF(){
		try {
			FileWR fBF = new FileWR();
			BF = fBF.readLines("BF.txt");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void chargerBR(){
		try {
			FileWR fBR = new FileWR();
			BF = fBR.readLines("BR.txt");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}





	public ArrayList<String> getVF() {
		return VF;
	}

	public void setVF(ArrayList<String> vF) {
		VF = vF;
	}

	public ArrayList<String> getVA() {
		return VA;
	}

	public void setVA(ArrayList<String> vA) {
		VA = vA;
	}

	public ArrayList<String> getVC() {
		return VC;
	}

	public void setVC(ArrayList<String> vC) {
		VC = vC;
	}

	public boolean isInf() {
		return inf;
	}

	public void setInf(boolean inf) {
		this.inf = inf;
	}

	public boolean isDec() {
		return dec;
	}

	public void setDec(boolean dec) {
		this.dec = dec;
	}

	public int getNbinf() {
		return nbinf;
	}

	public void setNbinf(int nbinf) {
		this.nbinf = nbinf;
	}

	public ArrayList<String> getBR() {
		return BR;
	}

	public void setBR(ArrayList<String> bR) {
		BR = bR;
	}

	public ArrayList<String> getDemandable() {
		return Demandable;
	}

	public void setDemandable(ArrayList<String> demandable) {
		Demandable = demandable;
	}

	public ArrayList<String> getBF() {
		return BF;
	}

	public void setBF(ArrayList<String> bF) {
		BF = bF;
	}	
}
